{"version":3,"sources":["firebase.js","Todo.js","table.jsx","addTodo.js","App.js","serviceWorker.js","store.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","todoData","ref","Todo","checkDone","props","todo","todoName","doneAction","console","log","updateDone","deleteAction","delete","this","i","className","type","onClick","Component","connect","state","isDone","dispatch","doneItem","deleteItem","table","showTodos","dataFirebase","map","value","key","on","todos","todoList","forEach","element","val","push","setState","scope","DoneTodo","addTodo","isChange","event","name","target","addData","item","addDataStore","onChange","getItem","App","Boolean","window","location","hostname","match","initialState","store","createStore","action","child","update","remove","subscribe","getState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.536959d5.chunk.js","sourcesContent":["  // Your web app's Firebase configuration\r\n  import * as firebase from 'firebase'\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyC1oeiRFe1xlivEy2XalngrF0aFbttJLnY\",\r\n    authDomain: \"todos-react-7fb7a.firebaseapp.com\",\r\n    databaseURL: \"https://todos-react-7fb7a.firebaseio.com\",\r\n    projectId: \"todos-react-7fb7a\",\r\n    storageBucket: \"todos-react-7fb7a.appspot.com\",\r\n    messagingSenderId: \"19317713001\",\r\n    appId: \"1:19317713001:web:94b90776e4fafc77785af8\",\r\n    measurementId: \"G-XE0P2YG1DS\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  export const todoData = firebase.database().ref('node1');","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\n class Todo extends Component {\r\n    checkDone = () => {\r\n        if(this.props.todo[\"isDone\"] === true) \r\n            return (<td><p><s>{this.props.todoName}</s></p></td>)\r\n\r\n        return (<td><p>{this.props.todoName}</p></td>)\r\n    }\r\n    doneAction = () => {\r\n        // this.props.doneTodo();\r\n        console.log(this.props.todo[\"isDone\"]);\r\n        this.props.todo[\"isDone\"] = !this.props.todo[\"isDone\"]\r\n\r\n        this.props.updateDone(this.props.todo)\r\n    }\r\n    deleteAction = () => {\r\n        this.props.delete(this.props.todo)\r\n\r\n    }\r\n    render() {\r\n        \r\n        return (\r\n            <tr>\r\n                <td>{this.props.i}</td>\r\n                {/* <td><p className=\"text-decoration-line-through\">{this.props.todoName}</p></td> */}\r\n                {this.checkDone()}\r\n                <td>\r\n                    <div className=\"btn-group\">\r\n                        <button type=\"button\" onClick={() =>this.doneAction()} className=\"btn btn-outline-secondary\">Done</button>\r\n                        <button type=\"button\" onClick={()=>this.deleteAction()} className=\"btn btn-outline-danger\">Delete</button>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n//onClick={() => this.props.DoneTodo()}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isDone : state.isDone\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateDone : (doneItem) => {\r\n            dispatch({type:\"UPDATE_DONE\",doneItem})\r\n        },\r\n        delete : (deleteItem) => {\r\n            dispatch({type:\"DELETE\", deleteItem})\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Todo)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport {todoData} from './firebase'\r\nimport Todo from './Todo'\r\n\r\n\r\nclass table extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n       \r\n        this.state = {\r\n            dataFirebase: []\r\n        }\r\n    }\r\n    componentWillMount() {\r\n        todoData.on('value', (todos) => {\r\n        var todoList =[]\r\n            todos.forEach(element => {\r\n                let key = element.key;\r\n                let todoName = element.val().todoName;\r\n                let isDone = element.val().isDone;\r\n                todoList.push(\r\n                    {\r\n                        key: key,\r\n                        todoName: todoName,\r\n                        isDone: isDone\r\n                    }\r\n                )\r\n            })\r\n            this.setState({\r\n                dataFirebase:todoList\r\n            })\r\n        })\r\n    }\r\n    showTodos = ()=> {\r\n\r\n        if(this.state.dataFirebase) {\r\n            return this.state.dataFirebase.map((value, key) => {\r\n                return (\r\n                    <Todo\r\n                        i = {key}\r\n                        todo = {value}\r\n                        todoName = {value.todoName}\r\n                     />  \r\n                )\r\n            })\r\n        }\r\n         \r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"col-8\">\r\n                <table className=\"table table-hover\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">STT</th>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            this.showTodos()\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapDispatchToProps = (dispatch)=> {\r\n    return {\r\n        DoneTodo : () => {\r\n            dispatch({type:\"DONE\"})\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapDispatchToProps)(table)\r\n// export default table","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nclass addTodo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todoName: '',\r\n            isDone:false\r\n        }\r\n    }\r\n    isChange = (event) => {\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n        console.log(name)\r\n        console.log(value)\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n    addData = (todoName) => {\r\n        let item = {}\r\n        item.todoName = todoName;\r\n        item.isDone = this.state.isDone;\r\n        // console.log(todoName) \r\n        // this.props.getData(item)\r\n        console.log(item)\r\n        this.props.addDataStore(item)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"col-4\">\r\n                <form>\r\n                    <div className=\"form-group\">\r\n                        <h2>Add todos</h2>\r\n                        <div className=\"input-group\">\r\n                            <input onChange={(event) => this.isChange(event)} name=\"todoName\" type=\"text\" className=\"form-control\" />\r\n                            <div className=\"input-group-append\">\r\n                                <button  onClick={() => this.addData(this.state.todoName)}  className=\"btn btn-outline-secondary\" type=\"reset\">Add</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    \r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addDataStore: (getItem) => {\r\n            dispatch({type:\"ADD_ITEM\",getItem})\r\n        }   \r\n    }\r\n}\r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps )(addTodo)\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Table from './table'\nimport AddTodo from './addTodo';\n// import {todoData} from './firebase'\nclass  App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n  render() {\n\n    // var data = firebase.database().ref('node1/');\n    // data.once('value').then(function(snapshot) {\n    // console.log(snapshot.val())\n    // })\n    \n\n    // console.log(todoData.once('value')\n    //                             .then(function(snapshot) {\n    //                               console.log(snapshot.val())\n    //                             }));\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <Table></Table>\n            <AddTodo></AddTodo>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n  \n\n\nexport default (App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore} from 'redux'\r\n\r\nimport {todoData} from './firebase'\r\n\r\nconst initialState = {\r\n  doneItem: {}\r\n}\r\n\r\nconst allReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n\r\n  case \"ADD_ITEM\":\r\n    // console.log(\"connected\")\r\n    console.log(\"CONNECTED \" + action.getItem)\r\n    todoData.push(action.getItem);\r\n    // console.log(\"push \" + JSON.stringify(action.getItem))\r\n    return state;\r\n    case \"UPDATE_DONE\":\r\n      todoData.child(action.doneItem.key).update({\r\n        isDone : action.doneItem.isDone\r\n      })\r\n      return state\r\n  // case \"DONE\":\r\n  //   console.log(\"DONE\")\r\n  //   return {...state, doneItem[\"isDone\"]: !doneItem[\"isDone\"]};\r\n  case \"DELETE\":\r\n    todoData.child(action.deleteItem.key).remove();\r\n    return state\r\n  default:\r\n    return state\r\n  }\r\n}\r\nlet store = createStore(allReducers)\r\nstore.subscribe(() =>{\r\n  console.log(store.getState())\r\n})\r\n  // var simpleState = {\r\n  //   status: false,\r\n  //   array: [\"a\", \"b\", \"c\"]\r\n  // }\r\n\r\n  // var reducer = (state=simpleState, action) => {\r\n  //   switch(action.type) {\r\n  //     case \"CHANGE_STATUS\":\r\n  //       return {...state, status: !state.status};\r\n  //     case \"ADD_ITEM\":\r\n  //       return {...state, array:[...state.array,action.addItem]};\r\n  //       case \"DELETE\":\r\n  //         return {...state, array:state.array.filter((value, key)=> key !== action.index)}\r\n  //     default:\r\n  //       break;\r\n  //   }\r\n  //   return state;\r\n  // } \r\n// addData = (item) => {\r\n//   todoData.push(item)\r\n// }\r\n\r\n\r\n// const arrayInitialState = [\"con ga\", \"con vit\"]\r\n// const changeArray = (state = arrayInitialState, action ) => {\r\n//     switch (action.type) {\r\n  \r\n//     case \"NEW_ITEM\":\r\n//       return [...state, action.newItem];\r\n//     case \"DELETE_ITEM\":\r\n//       return [state.filter((value, key)=> key !== action.number)];\r\n//     default:\r\n//       return state\r\n//     }\r\n//   }\r\n  \r\n// const statusInitialState = false\r\n// const changeStatus = (state = statusInitialState, action) => {\r\n//   switch (action.type) {\r\n//     case \"CHANGE_STATUS\":\r\n//       return !state  ;\r\n    \r\n//     default:\r\n//       return state;\r\n//   }\r\n// } \r\n\r\n// const allReducers = combineReducers({\r\n//   status: changeStatus,\r\n//   array: changeArray\r\n// })\r\n// var store = createStore(allReducers)\r\n// store.subscribe(() => {\r\n//   // console.log(store.getState());\r\n// })\r\n\r\n// store.dispatch({type:\"ADD_ITEM\",addItem:\"d\"})\r\n// store.dispatch({type:\"DELETE\", index:1})\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store'\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}